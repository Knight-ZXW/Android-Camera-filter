/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

/* Header for class com_gotye_sdk_FFMediaInfo */

#ifndef _Included_com_gotye_sdk_FFMediaInfo
#define _Included_com_gotye_sdk_FFMediaInfo
#ifdef __cplusplus
extern "C" {
#endif

#define LOG_TAG "easymediainfo"
#include "pplog.h"
#include "andsysutil.h"
#include "apMediaInfoUtil.h"

static int convert_jstring(JNIEnv* env, char *des_str, int* len, jstring str);

static bool fill_media_info(JNIEnv *env, jobject thiz, jobject info, jstring file_path, MediaInfo *native_info);

/*
 * Class:     com_gotye_sdk_FFMediaInfo
 * Method:    nativeGetMediaInfo
 * Signature: (Ljava/lang/String;Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_gotye_sdk_FFMediaInfo_nativeGetMediaInfo
  (JNIEnv *env, jobject thiz, jstring url, jobject info)
{
	PPLOGI("nativeGetMediaInfo()");
	
	char str_url[1024] = {0};
	int str_len = sizeof(str_url);
	convert_jstring(env, str_url, &str_len, url);

	MediaInfo native_info;
	if (!getMediaInfo(str_url, &native_info)) {
		PPLOGE("Get MediaDetailInfo failed.");
		return false;
	}
		
	if (!fill_media_info(env, thiz, info, url, &native_info))
		return false;

	PPLOGI("Get MediaDetailInfo succeed.");
	return true;
}

static bool fill_media_info(JNIEnv *env, jobject thiz, jobject info, jstring file_path, MediaInfo *native_info)
{
	jclass clazz = env->FindClass("com/gotye/sdk/MediaInfo");
	if (clazz == NULL) {
		PPLOGE("failed to find class com/gotye/sdk/MediaInfo");
		return false;
	}

	jfieldID f_path = env->GetFieldID(clazz, "mPath", "Ljava/lang/String;");
	jfieldID f_duration = env->GetFieldID(clazz, "mDurationMS", "J");
	jfieldID f_size = env->GetFieldID(clazz, "mSizeByte", "J");
	jfieldID f_frame_rate = env->GetFieldID(clazz, "mFrameRate", "D");
	jfieldID f_bitrate = env->GetFieldID(clazz, "mBitrate", "I");
	jfieldID f_format = env->GetFieldID(clazz, "mFormatName", "Ljava/lang/String;");

	jfieldID f_videocodec_name = env->GetFieldID(clazz, "mVideoCodecName", "Ljava/lang/String;");
	jfieldID f_width = env->GetFieldID(clazz, "mWidth", "I");
	jfieldID f_height = env->GetFieldID(clazz, "mHeight", "I");
		
	jfieldID f_video_channels = env->GetFieldID(clazz, "mVideoChannels", "I");
	jfieldID f_audio_channels = env->GetFieldID(clazz, "mAudioChannels", "I");
	jfieldID f_subtitle_channels = env->GetFieldID(clazz, "mSubTitleChannels", "I");

	jmethodID midSetAudioChannelInfo = env->GetMethodID(clazz, 
		"setAudioChannelsInfo", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
	jmethodID midSetSubtitleChannelInfo = env->GetMethodID(clazz, 
		"setSubtitleChannelsInfo", "(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

	env->SetIntField(info, f_audio_channels, native_info->audio_channels);
	for (int i=0;i<native_info->audio_channels;i++) {
		env->CallVoidMethod(info, midSetAudioChannelInfo, i, 
			native_info->audio_streamIndexs[i], 
			env->NewStringUTF(native_info->audiocodec_names[i]), 
			env->NewStringUTF(native_info->audiocodec_profiles[i]),
			env->NewStringUTF(native_info->audio_languages[i]), 
			env->NewStringUTF(native_info->audio_titles[i]));
	}

	env->SetIntField(info, f_subtitle_channels, native_info->subtitle_channels);
	for (int i=0;i<native_info->subtitle_channels;i++) {
		env->CallVoidMethod(info, midSetSubtitleChannelInfo, i, 
			native_info->subtitle_streamIndexs[i], 
			env->NewStringUTF(native_info->subtitlecodec_names[i]), 
			env->NewStringUTF(native_info->subtitle_languages[i]), 
			env->NewStringUTF(native_info->subtitle_titles[i]));
	}

	if (file_path != NULL)
		env->SetObjectField(info, f_path, file_path);
	else
		env->SetObjectField(info, f_path, env->NewStringUTF("N/A"));
	env->SetLongField(info, f_duration, native_info->duration_ms);
	env->SetLongField(info, f_size, native_info->size_byte);
	env->SetDoubleField(info, f_frame_rate, native_info->frame_rate);
	env->SetIntField(info, f_bitrate, native_info->bitrate);
		
	env->SetObjectField(info, f_format, env->NewStringUTF(native_info->format_name));
	env->SetIntField(info, f_video_channels, native_info->video_channels);
	env->SetObjectField(info, f_videocodec_name, env->NewStringUTF(native_info->videocodec_name));
	env->SetIntField(info, f_width, native_info->width);
	env->SetIntField(info, f_height, native_info->height);
	return true;
}

static int convert_jstring(JNIEnv* env, char *des_str, int* len, jstring str)
{
	const char *nativeString = env->GetStringUTFChars(str, 0);     
	and_sysutil_strcpy(des_str, nativeString, *len);
	env->ReleaseStringUTFChars(str, nativeString);
	
	return 0;
}

#ifdef __cplusplus
}
#endif
#endif
