/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "apAudioPlayer.h"

#define LOG_TAG "easyaudioplayer"
#include "pplog.h"

/* Header for class com_gotye_sdk_EasyAudioPlayer */

#ifndef _Included_com_gotye_sdk_EasyAudioPlayer
#define _Included_com_gotye_sdk_EasyAudioPlayer
#ifdef __cplusplus
extern "C" {
#endif

extern JavaVM *g_JavaVM;

static apAudioPlayer*	gs_player;
static jobject			gs_class;
static jmethodID		gs_mid_onPCM;
static jmethodID		gs_mid_onComplete;
static jmethodID		gs_mid_onEof;

static JNIEnv* getAttachedJNIEnv()
{
	if (g_JavaVM == NULL) {
		PPLOGE("g_JavaVM is null");
		return NULL;
	}

	JNIEnv* env = NULL;
	int status;

	status = g_JavaVM->GetEnv((void**) &env, JNI_VERSION_1_4);
	if (JNI_OK == status)
		return env;
	else if (status == JNI_EDETACHED) {
		PPLOGI("AttachCurrentThread: JNI_EDETACHED");
		status = g_JavaVM->AttachCurrentThread(&env, NULL);
		if (status != JNI_OK) {
			PPLOGE("AttachCurrentThread failed %d", status);
			return NULL;
		}

		return env;
	}
	else {
		PPLOGE("GetEnv failed %d", status);
	}

	return NULL;
}

/*static void detachJNIEnv()
{
	int status;

	if (g_JavaVM == NULL) {
		PPLOGE("gs_jvm is null");
		return;
	}

	status = g_JavaVM->DetachCurrentThread();
	if (status != JNI_OK) {
		PPLOGE("DetachCurrentThread failed %d", status);
		return;
	}
	
	PPLOGI("CurrentThread Detached");
}*/

static void onPCM(const char *data, int size, int timestamp/*msec*/)
{
	//PPLOGD("onPCM %p %d", data, size);
	
	JNIEnv *env = getAttachedJNIEnv();
    if (env == NULL)
		return;

	jbyteArray arrayBuf = env->NewByteArray(size);
	if (arrayBuf == NULL) {
		PPLOGE("failed to alloc byte array");
		return;
	}
	
	env->SetByteArrayRegion(arrayBuf, 0, size, (const jbyte *)data);
	env->CallVoidMethod(gs_class, gs_mid_onPCM, arrayBuf, size, timestamp);
	env->DeleteLocalRef(arrayBuf);
}

static void onComplete()
{
	JNIEnv *env = getAttachedJNIEnv();
    if (env == NULL)
		return;

	env->CallVoidMethod(gs_class, gs_mid_onComplete);
}

static void onEof()
{
	JNIEnv *env = getAttachedJNIEnv();
    if (env == NULL)
		return;

	env->CallVoidMethod(gs_class, gs_mid_onEof);
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeOpen
 * Signature: (Ljava/lang/String;III)Z
 */
JNIEXPORT jboolean JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeOpen
  (JNIEnv *env, jobject thiz, jstring jstr_url, jint out_channels, jint out_format, jint out_sample_rate)
{
	jclass clazz = env->FindClass("com/gotye/sdk/EasyAudioPlayer");
	if (clazz == NULL) {
		PPLOGE("failed to find class com/gotye/sdk/EasyAudioPlayer");
		jclass exceptionClass = env->FindClass("java/lang/RuntimeException");
		if (exceptionClass != NULL)
			env->ThrowNew(exceptionClass, "failed to find class com/gotye/sdk/EasyAudioPlayer");
		return JNI_FALSE;
	}
	gs_mid_onPCM = env->GetMethodID(clazz, "onPCMData", "([BII)V");
	gs_mid_onComplete = env->GetMethodID(clazz, "onComplete", "()V");
	gs_mid_onEof = env->GetMethodID(clazz, "onEndofStream", "()V");
	if (gs_player != NULL) {
		delete gs_player;
		gs_player = NULL;
	}

	gs_class = env->NewGlobalRef(thiz);

	// convert Java string to UTF-8
	const char *str_url = env->GetStringUTFChars(jstr_url, NULL);
	gs_player = new apAudioPlayer();
	gs_player->setCallback(onPCM, onComplete, onEof);
	bool ret = gs_player->open(str_url, out_channels, out_format, out_sample_rate);

	env->ReleaseStringUTFChars(jstr_url, str_url);
	env->DeleteLocalRef(jstr_url);
	return (jboolean)ret;
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativePlay
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativePlay
  (JNIEnv *env, jobject thiz)
{
	if (gs_player != NULL)
		return gs_player->play();

	return JNI_FALSE;
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeSetLoop
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeSetLoop
	(JNIEnv *env, jobject thiz, jboolean loop)
{
	if (gs_player != NULL) {
		gs_player->setLoop(loop);
	}
	else {
		PPLOGE("cannot set loop before audioplayer open()");
	}
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeGetCurrentPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeGetCurrentPosition
	(JNIEnv *env, jobject thiz)
{
	if (gs_player != NULL)
		return gs_player->getCurrentPosition();

	return 0;
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeGetDuration
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeGetDuration
	(JNIEnv *env, jobject thiz)
{
	if (gs_player != NULL)
		return gs_player->getDuration();

	return 0;
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeSetVolume
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeSetVolume
	(JNIEnv *env, jobject thiz, jfloat vol)
{
	if (gs_player != NULL)
		gs_player->setVolume(vol);
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeGetVolume
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeGetVolume
	(JNIEnv *env, jobject thiz)
{
	if (gs_player != NULL)
		return gs_player->getVolume();

	return 0.0f;
}

/*
 * Class:     com_gotye_sdk_EasyAudioPlayer
 * Method:    nativeClose
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_gotye_sdk_EasyAudioPlayer_nativeClose
  (JNIEnv *, jobject)
{
	if (gs_player != NULL) {
		delete gs_player;
		gs_player = NULL;
	}
}

#ifdef __cplusplus
}
#endif
#endif
/* Header for class com_gotye_sdk_EasyAudioPlayer_OnPCMCallback */

#ifndef _Included_com_gotye_sdk_EasyAudioPlayer_OnPCMCallback
#define _Included_com_gotye_sdk_EasyAudioPlayer_OnPCMCallback
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#endif
